# ==== 이미지/컨테이너 공통 ====
IMAGE_NAME=dinov3:cuda12.1-py310
TZ=Asia/Seoul

# ==== 호스트 경로 (각자 로컬에 맞게 수정) ====
# 프로젝트 코드 (runCLI.py, visualize.py, imatch/ 포함)
PROJECT_HOST=/home/<YOUR_UBUNTU_USER>/dinov3-docker/project

# dinov3 소스 (hubconf.py가 있는 "리포 루트")
# 예) /home/<USER>/dinov3-src  (안에 hubconf.py와 dinov3/ 폴더가 있어야 함)
CODE_HOST=/home/<YOUR_UBUNTU_USER>/dinov3-src

# 가중치 루트 (WSL 경로로!)
# 예) Windows D:\GoogleDrive\KNK_Lab\_Projects\dinov3_weights -> /mnt/d/GoogleDrive/KNK_Lab/_Projects/dinov3_weights
WEIGHTS_HOST=/mnt/d/GoogleDrive/KNK_Lab/_Projects/dinov3_weights

# 데이터셋 루트 (WSL 경로로!)
# 예) D:\GoogleDrive\KNK_Lab\_Datasets\shinsung_data -> /mnt/d/GoogleDrive/KNK_Lab/_Datasets/shinsung_data
DATASET_HOST=/mnt/d/GoogleDrive/KNK_Lab/_Datasets/shinsung_data

# 결과(Exports) 루트 (WSL 경로로!)
# 예) D:\Exports -> /mnt/d/Exports
EXPORT_HOST=/mnt/d/Exports

# ==== 컨테이너 내부 경로(고정) ====
REPO_DIR=/workspace/dinov3            # torch.hub.load가 참조 (여기에 hubconf.py가 보여야 함)
IMG_ROOT=/opt/datasets                # run-matching이 스캔할 이미지 루트
EXPORT_DIR=/exports/dinov3_embeds
PAIR_VIZ_DIR=/exports/pair_viz

# (옵션) torch.hub가 외부 다운로드 못 하게 차단 (재현성/보안)
DINOV3_BLOCK_NET=1
